# =========================
# Print Macros
# =========================

[gcode_macro PURGE_LINE]
gcode:
  G90 # Use absolute coordinates
  G92 E0 # Reset extruder
  G1 Z5.0 F3000 # Move z up little to prevent scratching of surface
  G1 X5 Y5 F5000 # Move to start-line position
  G1 Z0.2 F3000
  G1 X135 Y5 F500 E15  # Draw 1st line
  G1 X135 Y5.4 F5000 # Move to side a little
  G1 X5 Y5.4 F500 E30  # Draw 2nd line
  G92 E0 # Reset extruder
  G1 Z5.0 F3000 # Move z up little to prevent scratching of surface

[gcode_macro START_PRINT]
variable_parameter_T_BED: 80
variable_parameter_T_EXTRUDER: 240
gcode:
  M140 S{T_BED} # Start heating bed
  M190 S{T_BED} # Wait for bed to reach temperature
  M104 S{T_EXTRUDER} # Start heating extruder
  G90 # Use absolute coordinates
  CG28 # Home the printer
  G29 # Create bed mesh
  M109 S{T_EXTRUDER} # Wait for extruder to reach temperature
  PURGE_LINE

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    ##### set defaults #####
    {% set x = params.X|default(5) %}      #edit to your park position
    {% set y = params.Y|default(5) %}      #edit to your park position
    {% set z = params.Z|default(20)|float %} #edit to your park position
    {% set e = params.E|default(0) %}        #edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{e} F2100
    G1 Z{z_safe}
    G90
    G1 X{x} Y{y} F6000

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    ##### set defaults #####
    {% set e = params.E|default(0) %} #edit to your retract length
    G91
    G1 E{e} F2100
    G90
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    BASE_RESUME

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT

[gcode_macro END_PRINT]
gcode:
  M140 S0 # Turn off heatbed
  M104 S0 # Turn off temperature
  M107 # Turn off fan
  G91 # Use relative coordinates
  # Move Z up 25mm
  G1 Z+5 F3000
  G1 Z+5 F3000
  G1 Z+5 F3000
  G1 Z+5 F3000
  G1 Z+5 F3000
  G90 # Use absolute coordinates
  G1 X5 Y210 F2000 # Move nozzle close to home and bed forwards
  # Disable motors
  SET_DISABLE_MOTORS
  M84

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 2
; minimum probe count
variable_min_probe_count : 3
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

        {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
	
	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}

# =========================
# Filament Macros
# =========================

[gcode_macro LOAD_FILAMENT]
gcode:
  G91 # Use relative coordinates
  G1 E25.0 F1000 # Push some filament out
  G1 E40 F2000 # Push alot more filament out quickly
  G4 P900 # Wait 0.9 seconds
  G1 E50.0 F250 # Extrude some more out slowly
  G90 # Use absolute coordinates
  {% if printer["gcode_macro DISABLE_MOTORS_CHECK"].disable_motors == 1 %}
    M84 # Disable motors
  {% endif %}

[gcode_macro UNLOAD_FILAMENT]
gcode:
  G91 # Use relative coordinates
  G1 E5.0 F1200 # Push some filament out
  G1 E3.0 F1600 # Push a bit more filament out, faster
  G1 E-10 F2500 # Retract quickly
  G1 E-60 F2000 # Fully retract the rest out
  G90 # Use absolute coordinates
  {% if printer["gcode_macro DISABLE_MOTORS_CHECK"].disable_motors == 1 %}
    M84 # Disable motors
  {% endif %}

[gcode_macro PURGE]
gcode:
  G91 # Use relative coordinates
  G1 E50.0 F250 # Extrude slowly
  G90 # Use absolute coordinates
  {% if printer["gcode_macro DISABLE_MOTORS_CHECK"].disable_motors == 1 %}
    M84 # Disable motors
  {% endif %}

[gcode_macro M600]
gcode:
  SET_IDLE_TIMEOUT TIMEOUT=72000
  SET_ENABLE_MOTORS
  PAUSE
  UNLOAD_FILAMENT

# =========================
# Movement Macros
# ========================= 

[gcode_macro MOVE_X]
gcode:
  {% set custom_distance = params.CUSTOM_DISTANCE|default(10)|int %}
  FORCE_MOVE STEPPER=stepper_x DISTANCE={custom_distance} VELOCITY=50
  M84 # Disable motors

[gcode_macro MOVE_Y]
gcode:
  {% set custom_distance = params.CUSTOM_DISTANCE|default(10)|int %}
  FORCE_MOVE STEPPER=stepper_y DISTANCE={custom_distance} VELOCITY=50
  M84 # Disable motors

[gcode_macro MOVE_Z]
gcode:
  {% set custom_distance = params.CUSTOM_DISTANCE|default(10)|int %}
  FORCE_MOVE STEPPER=stepper_z DISTANCE={custom_distance} VELOCITY=10
  M84 # Disable motors

[gcode_macro G29]
gcode:
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE
    BED_MESH_PROFILE LOAD=default

[gcode_macro CG28]
gcode:
  {% if "x" not in printer.toolhead.homed_axes or "y" not in printer.toolhead.homed_axes or "z" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}

[gcode_macro DISABLE_MOTORS_CHECK]
variable_disable_motors: 1
gcode:
  M118 {disable_motors}

[gcode_macro SET_ENABLE_MOTORS]
gcode:
  SET_GCODE_VARIABLE MACRO=DISABLE_MOTORS_CHECK VARIABLE=disable_motors VALUE=0

[gcode_macro SET_DISABLE_MOTORS]
gcode:
  SET_GCODE_VARIABLE MACRO=DISABLE_MOTORS_CHECK VARIABLE=disable_motors VALUE=1

# =========================
# Misc. Macros
# ========================= 
[gcode_macro SCREW_TILT_CALCULATE]
gcode:
  SCREWS_TILT_CALCULATE

[gcode_shell_command backup_cfg]
command: sh /home/pi/klipper_config/autocommit.sh
timeout: 30.
verbose: True

[gcode_macro BACKUP_CFG]
gcode:
    RUN_SHELL_COMMAND CMD=backup_cfg

[gcode_macro FIRMWARE_RESTART]
rename_existing: STOCK_FIRMWARE_RESTART
gcode:
  BACKUP_CFG
  STOCK_FIRMWARE_RESTART

[gcode_macro _USE_INFILL_SQV]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sqv = svv.infill_sqv | default(printer.configfile.settings.printer.square_corner_velocity, true) %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ sqv }

[gcode_macro _USE_NORMAL_SQV]
gcode:
    {% set sqv = printer.configfile.settings.printer.square_corner_velocity %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ sqv }

[gcode_macro SET_INFILL_SQV]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set val = params.SQV|default(svv.infill_sqv|default(printer.configfile.settings.printer.square_corner_velocity, true), true) | int %}
    SAVE_VARIABLE VARIABLE=infill_sqv VALUE={val}
